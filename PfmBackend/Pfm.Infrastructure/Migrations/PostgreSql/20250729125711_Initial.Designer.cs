// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pfm.Infrastructure.Persistence.DbContexts;

#nullable disable

namespace Pfm.Infrastructure.Migrations.PostgreSql
{
    [DbContext(typeof(PfmPostgreSqlDbContext))]
    [Migration("20250729125711_MigrationName")]
    partial class MigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pfm.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasKey("Code");

                    b.HasIndex("ParentCode");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Pfm.Domain.Entities.SingleCategorySplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CatCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.HasIndex("CatCode");

                    b.HasIndex("TransactionId");

                    b.ToTable("Splits");
                });

            modelBuilder.Entity("Pfm.Domain.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<double>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CatCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<int?>("Mcc")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CatCode");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Pfm.Domain.Entities.Category", b =>
                {
                    b.HasOne("Pfm.Domain.Entities.Category", "Parent")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Pfm.Domain.Entities.SingleCategorySplit", b =>
                {
                    b.HasOne("Pfm.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CatCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pfm.Domain.Entities.Transaction", "Transaction")
                        .WithMany("Splits")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pfm.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Pfm.Domain.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CatCode");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pfm.Domain.Entities.Category", b =>
                {
                    b.Navigation("Subcategories");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Pfm.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Splits");
                });
#pragma warning restore 612, 618
        }
    }
}
